<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project InitialTargets="AddSkipGetTargetFrameworkToProjectReferences">

  <PropertyGroup>
    <ErrorIfBuildToolsRestoredFromIndividualProject Condition="!Exists('$(ToolsDir)')">true</ErrorIfBuildToolsRestoredFromIndividualProject>

    <!-- Reset these properties back to blank, since they are defaulted by Microsoft.NET.Sdk -->
    <FileAlignment Condition="'$(FileAlignment)' == '512'"></FileAlignment>
    <ErrorReport Condition="'$(ErrorReport)' == 'prompt'"></ErrorReport>
    <WarningsAsErrors Condition="'$(WarningsAsErrors)' == 'NU1605'"></WarningsAsErrors>
  </PropertyGroup>

  <Import Project="..\Directory.Build.targets" />

  <PropertyGroup>
    <!--
    Hack workaround to skip the GenerateCompiledExpressionsTempFile target in
    Microsoft.WorkflowBuildExtensions.targets target that always runs in VS
    -->
    <GenerateCompiledExpressionsTempFilePathForEditing></GenerateCompiledExpressionsTempFilePathForEditing>

    <!-- Disable restoring of package references in our projects -->
    <RestoreProjectStyle>None</RestoreProjectStyle>
  </PropertyGroup>

  <!-- Settings for GenerateReferenceAssemblySource. -->
  <PropertyGroup>
    <_ExcludeAPIList>$(RepositoryEngineeringDir)DefaultGenApiDocIds.txt</_ExcludeAPIList>
    <_LicenseHeaderTxtPath>$(RepositoryEngineeringDir)LicenseHeader.txt</_LicenseHeaderTxtPath>
    <GenAPITargetPath>$([MSBuild]::NormalizePath('$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), Directory.Build.props))', 'ref', '$(TargetName).cs'))</GenAPITargetPath>
    <GenAPILibPath>$(RefPath)</GenAPILibPath>
    <GenAPIAdditionalParameters>--exclude-attributes-list "$(_ExcludeAPIList)" --header-file "$(_LicenseHeaderTxtPath)"</GenAPIAdditionalParameters>
    <SkipGenAPITargetPathFileWrite>true</SkipGenAPITargetPathFileWrite>
  </PropertyGroup>

  <Target Name="AddSkipGetTargetFrameworkToProjectReferences" Condition="'@(ProjectReference)' != ''">
    <ItemGroup>
      <ProjectReference>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!--
  Hack workaround for not restoring each project. Instead, we turn off all the targets
  that require a `project.assets.json`, since ours will be empty anyway.
  -->
  <Target Name="_ClearResolvePackageAssets"
          BeforeTargets="AssignProjectConfiguration">

    <PropertyGroup>
      <ResolvePackageDependenciesForBuildDependsOn></ResolvePackageDependenciesForBuildDependsOn>
    </PropertyGroup>

  </Target>

  <!-- Returns the assembly version of the project for consumption
       by the NuGet package generation -->
  <Target Name="GetAssemblyVersion"
          Returns="$(AssemblyVersion)"/>

  <!-- Returns the generated documentation file for consumption
       by the NuGet package generation -->
  <Target Name="GetDocumentationFile"
          Returns="$(DocumentationFile)"/>

  <Target Name="DumpTargets" BeforeTargets="ResolveProjectReferences">
    <Message Text="DumpTargets> $(OutputPath), C=[$(Configuration)], CG=[$(ConfigurationGroup)], OG=[$(OSGroup)], TG=[$(TargetGroup)]" Importance="Low" />
  </Target>

  <!-- This target will be moved into buildtools. Checked in here for now to add validationand in order not to block buildtools ingestion. -->
  <Target Name="ValidateExcludeCompileDesktop" AfterTargets="GetPackageDependencies" Inputs="%(Dependency.Identity);%(Dependency.TargetFramework)" Outputs="unused">
    <PropertyGroup>
      <_excludeCompile Condition="@(Dependency->WithMetadataValue('Exclude', 'Compile')->Count()) == @(Dependency->Count())">true</_excludeCompile>
    </PropertyGroup>
    <Error Text="Cannot have Exclude=Compile dependencies when targeting a desktop TFM. @(Dependency). You can exclude the reference asset in the package by setting the ExcludeReferenceAssets property to true in your project." 
           Condition="$([System.String]::Copy('%(Dependency.TargetFramework)').StartsWith('net4')) AND 
                      '$(_excludeCompile)' == 'true' AND
                      '%(Dependency.Identity)' != '_._'" />
  </Target>  

</Project>
